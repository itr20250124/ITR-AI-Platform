import OpenAI from 'openai';
import { BaseAIService } from '../BaseAIService';
import {
  ImageServiceInterface,
  ImageParameters,
  ImageResponse,
} from '../interfaces/AIServiceInterface';
import { ParameterDefinition } from '../../../types';
import { createRetryHandler } from '../utils/RetryHandler';

/**
 * OpenAI圖片生成服務 (DALL-E)
 */
export class OpenAIImageService
  extends BaseAIService
  implements ImageServiceInterface
{
  public provider = 'openai';
  public supportedParameters: ParameterDefinition[] = [
    {
      key: 'model',
      type: 'select',
      defaultValue: 'dall-e-3',
      options: ['dall-e-2', 'dall-e-3'],
      description: '選擇DALL-E模型',
    },
    {
      key: 'size',
      type: 'select',
      defaultValue: '1024x1024',
      options: ['256x256', '512x512', '1024x1024', '1792x1024', '1024x1792'],
      description: '圖片尺寸',
    },
    {
      key: 'quality',
      type: 'select',
      defaultValue: 'standard',
      options: ['standard', 'hd'],
      description: '圖片品質（僅DALL-E 3支持）',
    },
    {
      key: 'style',
      type: 'select',
      defaultValue: 'vivid',
      options: ['vivid', 'natural'],
      description: '圖片風格（僅DALL-E 3支持）',
    },
    {
      key: 'n',
      type: 'number',
      defaultValue: 1,
      min: 1,
      max: 4,
      description: '生成圖片數量',
    },
  ];

  private openai: OpenAI;
  private retryHandler = createRetryHandler({
    maxRetries: 2,
    baseDelay: 2000,
  });

  constructor() {
    super();
    this.validateApiKey();
    this.openai = new OpenAI({
      apiKey: this.apiKey,
    });
    this.initializeService();
  }

  protected getApiKey(): string {
    return process.env.OPENAI_API_KEY || '';
  }

  protected getBaseURL(): string {
    return process.env.OPENAI_BASE_URL || 'https://api.openai.com/v1';
  }

  /**
   * 生成圖片
   */
  async generateImage(
    prompt: string,
    parameters: ImageParameters = {}
  ): Promise<ImageResponse> {
    try {
      this.validateParameters(parameters);
      const mergedParams = this.mergeParameters(parameters);

      // 驗證參數組合
      this.validateParameterCombination(mergedParams);

      const response = await this.retryHandler.execute(async () => {
        const requestParams: any = {
          model: mergedParams.model,
          prompt: prompt,
          n: mergedParams.n,
          size: mergedParams.size,
          response_format: 'url',
        };

        // DALL-E 3 特有參數
        if (mergedParams.model === 'dall-e-3') {
          requestParams.quality = mergedParams.quality;
          requestParams.style = mergedParams.style;
          // DALL-E 3 只支持 n=1
          requestParams.n = 1;
        }

        return await this.openai.images.generate(requestParams);
      }, 'OpenAI Image Generation');

      if (!response.data || response.data.length === 0) {
        throw new Error('No image data returned from OpenAI');
      }

      const imageData = response.data[0];
      if (!imageData || !imageData.url) {
        throw new Error('No image generated by OpenAI');
      }

      const metadata: any = {
        model: mergedParams.model,
        revisedPrompt: imageData.revised_prompt, // DALL-E 3 可能會修改提示詞
      };

      // 如果有多張圖片，將額外的圖片URL添加到metadata中
      if (response.data.length > 1) {
        metadata.additionalImages = response.data.slice(1).map(img => img.url);
      }

      return {
        id: this.generateId(),
        imageUrl: imageData.url,
        prompt: prompt,
        parameters: mergedParams,
        status: 'completed',
        createdAt: new Date(),
        metadata,
      };
    } catch (error) {
      this.handleApiError(error);
    }
  }

  /**
   * 圖片變體生成
   */
  async createImageVariation(
    imageBuffer: Buffer,
    parameters: ImageParameters = {}
  ): Promise<ImageResponse> {
    try {
      const mergedParams = this.mergeParameters(parameters);

      const response = await this.retryHandler.execute(async () => {
        // 將Buffer轉換為File對象
        const imageFile = new File([new Uint8Array(imageBuffer)], 'image.png', {
          type: 'image/png',
        });

        return await this.openai.images.createVariation({
          image: imageFile,
          n: mergedParams.n || 1,
          size: mergedParams.size || '1024x1024',
          response_format: 'url',
        });
      }, 'OpenAI Image Variation');

      if (!response.data || response.data.length === 0) {
        throw new Error('No variation data returned from OpenAI');
      }

      const imageData = response.data[0];
      if (!imageData || !imageData.url) {
        throw new Error('No variation generated by OpenAI');
      }

      return {
        id: this.generateId(),
        imageUrl: imageData.url,
        prompt: 'Image variation',
        parameters: mergedParams,
        status: 'completed',
        createdAt: new Date(),
        metadata: {
          type: 'variation',
        },
      };
    } catch (error) {
      this.handleApiError(error);
    }
  }

  /**
   * 圖片編輯
   */
  async editImage(
    imageBuffer: Buffer,
    maskBuffer: Buffer,
    prompt: string,
    parameters: ImageParameters = {}
  ): Promise<ImageResponse> {
    try {
      const mergedParams = this.mergeParameters(parameters);

      const response = await this.retryHandler.execute(async () => {
        // 將Buffer轉換為File對象
        const imageFile = new File([new Uint8Array(imageBuffer)], 'image.png', {
          type: 'image/png',
        });
        const maskFile = new File([new Uint8Array(maskBuffer)], 'mask.png', {
          type: 'image/png',
        });

        return await this.openai.images.edit({
          image: imageFile,
          mask: maskFile,
          prompt: prompt,
          n: mergedParams.n || 1,
          size: mergedParams.size || '1024x1024',
          response_format: 'url',
        });
      }, 'OpenAI Image Edit');

      if (!response.data || response.data.length === 0) {
        throw new Error('No edit data returned from OpenAI');
      }

      const imageData = response.data[0];
      if (!imageData || !imageData.url) {
        throw new Error('No edited image generated by OpenAI');
      }

      return {
        id: this.generateId(),
        imageUrl: imageData.url,
        prompt: prompt,
        parameters: mergedParams,
        status: 'completed',
        createdAt: new Date(),
        metadata: {
          type: 'edit',
        },
      };
    } catch (error) {
      this.handleApiError(error);
    }
  }

  /**
   * 驗證參數組合
   */
  private validateParameterCombination(parameters: Record<string, any>): void {
    const { model, size, quality, style, n } = parameters;

    // DALL-E 2 限制
    if (model === 'dall-e-2') {
      if (quality && quality !== 'standard') {
        throw new Error('DALL-E 2 only supports standard quality');
      }
      if (style && style !== 'vivid') {
        throw new Error('DALL-E 2 does not support style parameter');
      }
      if (!['256x256', '512x512', '1024x1024'].includes(size)) {
        throw new Error(
          'DALL-E 2 only supports 256x256, 512x512, or 1024x1024 sizes'
        );
      }
    }

    // DALL-E 3 限制
    if (model === 'dall-e-3') {
      if (n > 1) {
        throw new Error('DALL-E 3 only supports generating 1 image at a time');
      }
      if (!['1024x1024', '1792x1024', '1024x1792'].includes(size)) {
        throw new Error(
          'DALL-E 3 only supports 1024x1024, 1792x1024, or 1024x1792 sizes'
        );
      }
    }
  }

  /**
   * 通用請求方法
   */
  async makeRequest(input: any, parameters: any): Promise<any> {
    if (typeof input === 'string') {
      return this.generateImage(input, parameters);
    }

    throw new Error('Invalid input format for OpenAI image service');
  }
}
